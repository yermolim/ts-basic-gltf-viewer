// Generated by dts-bundle-generator v5.4.0

/// <reference types="node" />

import { Observable } from 'rxjs';
import { Vector3 } from 'three';

export declare type MeshMergeType = "scene" | "model" | "model+" | null;
export declare type FastRenderType = "ch" | "aabb" | "ombb" | null;
export interface ModelFileInfo {
	url: string;
	guid: string;
	name: string;
}
export interface ModelLoadedInfo {
	url: string;
	guid: string;
	error?: Error;
}
export interface ModelLoadingInfo {
	url: string;
	guid: string;
	progress: number;
}
export interface ModelOpenedInfo {
	guid: string;
	name: string;
	handles: Set<string>;
}
export interface ColoringInfo {
	color: number;
	opacity: number;
	ids: string[];
}
export declare class Vec4 {
	x: number;
	y: number;
	z: number;
	w: number;
	constructor(x: number, y: number, z: number, w?: number, toZup?: boolean);
	static getDistance(start: Vec4, end: Vec4): Vec4;
}
export declare class Distance {
	start: Vec4;
	end: Vec4;
	distance: Vec4;
	constructor(start: Vector3, end: Vector3, toZup: boolean);
}
export declare class GltfViewerOptions {
	useAntialiasing: boolean;
	usePhysicalLights: boolean;
	ambientLightIntensity: number;
	hemiLightIntensity: number;
	dirLightIntensity: number;
	highlightingEnabled: boolean;
	highlightColor: number;
	selectionColor: number;
	isolationColor: number;
	isolationOpacity: number;
	meshMergeType: MeshMergeType;
	fastRenderType: FastRenderType;
	showAxesHelper: boolean;
	constructor(item?: object);
}
export declare class GltfViewer {
	optionsChange$: Observable<GltfViewerOptions>;
	loadingStateChange$: Observable<boolean>;
	modelLoadingStart$: Observable<ModelLoadedInfo>;
	modelLoadingEnd$: Observable<ModelLoadedInfo>;
	modelLoadingProgress$: Observable<ModelLoadingInfo>;
	openedModelsChange$: Observable<ModelOpenedInfo[]>;
	selectionChange$: Observable<Set<string>>;
	manualSelectionChange$: Observable<Set<string>>;
	lastFrameTime$: Observable<number>;
	snapPointChange$: Observable<Vec4>;
	distanceMeasureChange$: Observable<Distance>;
	private _optionsChange;
	private _loadingStateChange;
	private _modelLoadingStart;
	private _modelLoadingEnd;
	private _modelLoadingProgress;
	private _openedModelsChange;
	private _selectionChange;
	private _manualSelectionChange;
	private _lastFrameTime;
	private _snapPointChange;
	private _distanceMeasureChange;
	private _subscriptions;
	private _container;
	private _containerResizeSensor;
	private _options;
	private _measureMode;
	private _measurePoints;
	private _renderer;
	private _deferRender;
	private _cameraControls;
	private _lights;
	private _axes;
	private _renderScene;
	private _simplifiedScene;
	private _meshesNeedColorUpdate;
	private _pointerEventHelper;
	private _pickingScene;
	private _queuedColoring;
	private _queuedSelection;
	private _highlightedMesh;
	private _selectedMeshes;
	private _isolatedMeshes;
	private _coloredMeshes;
	private _loader;
	private _loadingInProgress;
	private _loadingQueue;
	private _loadedModels;
	private _loadedModelsByGuid;
	private _loadedModelsArray;
	private _loadedMeshes;
	private _loadedMeshesById;
	private _loadedMeshesArray;
	constructor(containerId: string, dracoDecoderPath: string, options: GltfViewerOptions);
	destroy(): void;
	updateOptionsAsync(options: GltfViewerOptions): Promise<GltfViewerOptions>;
	openModelsAsync(modelInfos: ModelFileInfo[]): Promise<ModelLoadedInfo[]>;
	closeModelsAsync(modelGuids: string[]): Promise<void>;
	colorItems(coloringInfos: ColoringInfo[]): void;
	selectItems(ids: string[]): void;
	isolateItems(ids: string[]): void;
	zoomToItems(ids: string[]): void;
	toggleMeasureMode(value: boolean): void;
	getOpenedModels(): ModelOpenedInfo[];
	getSelectedItems(): Set<string>;
	private initObservables;
	private closeSubjects;
	private onCanvasPointerDown;
	private onCanvasPointerUp;
	private onCanvasMouseMove;
	private addCanvasEventListeners;
	private initRenderer;
	private resizeRenderer;
	private updateRenderSceneAsync;
	private prepareToRender;
	private render;
	private renderWholeScene;
	private renderOnCameraMove;
	private initLoader;
	private processLoadingQueueAsync;
	private loadModel;
	private onModelLoadingStart;
	private onModelLoadingProgress;
	private onModelLoadingEnd;
	private addModelToLoaded;
	private removeModelFromLoaded;
	private updateModelsDataArrays;
	private emitOpenedModelsChanged;
	private runQueuedColoring;
	private resetSelectionAndColorMeshes;
	private colorMeshes;
	private removeColoring;
	private getMeshAt;
	private getSnapPointAt;
	private runQueuedSelection;
	private findAndSelectMeshes;
	private findMeshesByIds;
	private removeSelection;
	private removeIsolation;
	private resetSelection;
	private selectMeshAtPoint;
	private addToSelection;
	private removeFromSelection;
	private selectMeshes;
	private isolateSelectedMeshes;
	private emitSelectionChanged;
	private highlightMeshAtPoint;
	private highlightItem;
	private removeHighlighting;
	private setTempMarkerAtPoint;
	private setMeasureMarkerAtPoint;
	private emitDistanceMeasureChange;
	private clearMeasurements;
}

export {};
