// Generated by dts-bundle-generator v5.3.0

import { Observable } from 'rxjs';

export declare class GltfViewerOptions {
	dracoDecoderEnabled: boolean;
	dracoDecoderPath: string;
	constructor(item?: object);
}
export declare class GltfViewer {
	initialized$: Observable<boolean>;
	modelLoadingStateChange$: Observable<boolean>;
	modelLoadingStart$: Observable<{
		url: string;
		guid: string;
	}>;
	modelLoadingProgress$: Observable<number>;
	modelLoadingEnd$: Observable<{
		url: string;
		guid: string;
		error: Error;
	}>;
	openedModelsChange$: Observable<Map<string, {
		name: string;
		handles: Set<string>;
	}>>;
	selectionChange$: Observable<Set<string>>;
	manualSelectionChange$: Observable<Set<string>>;
	private _initialized;
	private _modelLoadingStateChange;
	private _modelLoadingStart;
	private _modelLoadingProgress;
	private _modelLoadingEnd;
	private _openedModelsChange;
	private _selectionChange;
	private _manualSelectionChange;
	private readonly _bakMatProp;
	private readonly _selectedProp;
	private readonly _isolatedProp;
	private _subscriptions;
	private _options;
	private _container;
	private _containerResizeSensor;
	private _containerWidth;
	private _containerHeight;
	private _renderer;
	private _mainScene;
	private _loader;
	private _camera;
	private _orbitControls;
	private _selectionMaterial;
	private _isolateMaterial;
	private _highlightMaterial;
	private _selectedMeshes;
	private _isolatedMeshes;
	private _highlightedMesh;
	private _pickingTarget;
	private _pickingScene;
	private _pickingColorToMesh;
	private _lastPickingColor;
	private _pointerEventHelper;
	private _loadingInProgress;
	private _loadingQueue;
	private _loadedModelsByGuid;
	private _loadedMeshesById;
	constructor(containerId: string, options: GltfViewerOptions);
	init(): void;
	destroy(): void;
	openModel(modelInfo: {
		url: string;
		guid: string;
		name: string;
	}): void;
	closeModel(modelGuid: string): void;
	selectItems(ids: string[]): void;
	isolateItems(ids: string[]): void;
	private initObservables;
	private closeSubjects;
	private _onCanvasPointerDown;
	private _onCanvasPointerUp;
	private initRendererWithScene;
	private initSpecialMaterials;
	private render;
	private fitCameraToObjects;
	private initPickingScene;
	private nextPickingColor;
	private addMeshToPickingScene;
	private removeMeshFromPickingScene;
	private getPickingPosition;
	private getItemAtPickingPosition;
	private updateContainerDimensions;
	private updateRendererSize;
	private initLoader;
	private loadQueuedModelsAsync;
	private loadModel;
	private onModelLoadingStart;
	private onModelLoadingProgress;
	private onModelLoadingEnd;
	private addModelToScene;
	private removeModelFromScene;
	private emitOpenedModelsChanged;
	private findMeshesByIds;
	private removeSelection;
	private removeIsolation;
	private selectMeshAtPoint;
	private addToSelection;
	private removeFromSelection;
	private selectMeshes;
	private isolateSelectedMeshes;
	private emitSelectionChanged;
}

export {};
