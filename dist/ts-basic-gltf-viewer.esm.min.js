import{BehaviorSubject as e,Subject as t}from"rxjs";import i from"three";import{GLTFLoader as s}from"three/examples/jsm/loaders/GLTFLoader";import{DRACOLoader as n}from"three/examples/jsm/loaders/DRACOLoader";import{OrbitControls as o}from"three/examples/jsm/controls/OrbitControls";import{ResizeSensor as a}from"css-element-queries";var r=function(e,t,i,s){return new(i||(i=Promise))((function(n,o){function a(e){try{h(s.next(e))}catch(e){o(e)}}function r(e){try{h(s.throw(e))}catch(e){o(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,r)}h((s=s.apply(e,t||[])).next())}))};class h{constructor(e=null){this.dracoDecoderEnabled=!0,this.dracoDecoderPath="/assets/draco/",null!=e&&Object.assign(this,e)}}class d{constructor(i,s){if(this._initialized=new e(!1),this._modelLoadingStateChange=new t,this._modelLoadingStart=new t,this._modelLoadingProgress=new t,this._modelLoadingEnd=new t,this._openedModelsChange=new t,this._selectionChange=new t,this._manualSelectionChange=new t,this._bakMatProp="materialBackup",this._selectedProp="selected",this._isolatedProp="isolated",this._subscriptions=[],this._selectedMeshes=[],this._isolatedMeshes=[],this._pickingColorToMesh=new Map,this._lastPickingColor=0,this._pointerEventHelper={downX:null,downY:null,maxDiff:10,waitForDouble:!1},this._loadingInProgress=!1,this._loadingQueue=[],this._loadedModelsByGuid=new Map,this._loadedMeshesById=new Map,this._onCanvasPointerDown=e=>{this._pointerEventHelper.downX=e.clientX,this._pointerEventHelper.downY=e.clientY},this._onCanvasPointerUp=e=>{const t=e.clientX,i=e.clientY;!this._pointerEventHelper.downX||Math.abs(t-this._pointerEventHelper.downX)>this._pointerEventHelper.maxDiff||Math.abs(i-this._pointerEventHelper.downY)>this._pointerEventHelper.maxDiff||(this._pointerEventHelper.waitForDouble?(this._selectedMeshes.length&&(this.isolateSelectedMeshes(),this.fitCameraToObjects(this._selectedMeshes)),this._pointerEventHelper.waitForDouble=!1):(this._pointerEventHelper.waitForDouble=!0,setTimeout(()=>{this._pointerEventHelper.waitForDouble=!1},300),this.selectMeshAtPoint(t,i)),this._pointerEventHelper.downX=null,this._pointerEventHelper.downY=null)},this._container=document.getElementById(i),!this._container)throw new Error("Container not found!");this._options=new h(s),this.init()}init(){this._containerResizeSensor=new a(this._container,()=>{this.updateContainerDimensions(),this.updateRendererSize()}),this.initObservables(),this.initRendererWithScene(),this.initSpecialMaterials(),this.initPickingScene(),this.initLoader(),this._initialized.next(!0)}destroy(){var e;this._subscriptions.forEach(e=>e.unsubscribe()),this.closeSubjects(),this._renderer&&this._renderer.dispose(),this._orbitControls&&this._orbitControls.dispose(),(null===(e=this._loader)||void 0===e?void 0:e.dracoLoader)&&this._loader.dracoLoader.dispose(),this._containerResizeSensor&&this._containerResizeSensor.detach()}openModel(e){(null==e?void 0:e.guid)&&(this._loadingQueue.push(e),this.loadQueuedModelsAsync())}closeModel(e){e&&this.removeModelFromScene(e)}selectItems(e){if(null==e?void 0:e.length){const{found:t,notFound:i}=this.findMeshesByIds(new Set(e));t.length&&this.selectMeshes(t,!1)}}isolateItems(e){if(null==e?void 0:e.length){const{found:t,notFound:i}=this.findMeshesByIds(new Set(e));t.length&&this.selectMeshes(t,!1,!0)}}initObservables(){this.initialized$=this._initialized.asObservable(),this.modelLoadingStateChange$=this._modelLoadingStateChange.asObservable(),this.modelLoadingStart$=this._modelLoadingStart.asObservable(),this.modelLoadingProgress$=this._modelLoadingProgress.asObservable(),this.modelLoadingEnd$=this._modelLoadingEnd.asObservable(),this.openedModelsChange$=this._openedModelsChange.asObservable(),this.selectionChange$=this._selectionChange.asObservable(),this.manualSelectionChange$=this._manualSelectionChange.asObservable()}closeSubjects(){this._initialized.complete(),this._modelLoadingStateChange.complete(),this._modelLoadingStart.complete(),this._modelLoadingProgress.complete(),this._modelLoadingEnd.complete(),this._openedModelsChange.complete(),this._selectionChange.complete(),this._manualSelectionChange.complete()}initRendererWithScene(){const e=new i.Scene,t=new i.AmbientLight(2236962,1),s=new i.HemisphereLight(16777147,526368,1);s.translateY(2e3),e.add(t),e.add(s);const n=new i.WebGLRenderer({alpha:!0,antialias:!0});n.setSize(this._containerWidth,this._containerHeight,!1),n.setClearColor(0,0),n.outputEncoding=i.sRGBEncoding,n.physicallyCorrectLights=!1,n.toneMapping=i.NoToneMapping;const a=new i.PerspectiveCamera(75,this._containerWidth/this._containerHeight,.01,1e4),r=new o(a,n.domElement);r.addEventListener("change",()=>this.render()),a.position.set(0,1e3,1e3),a.lookAt(0,0,0),r.update(),this._container.append(n.domElement),this._renderer=n,this._mainScene=e,this._camera=a,this._orbitControls=r,this.render()}initSpecialMaterials(){const e=new i.MeshPhysicalMaterial({color:new i.Color(16711680),emissive:new i.Color(16711680),blending:i.NormalBlending,flatShading:!0,side:i.DoubleSide,roughness:1,metalness:0}),t=new i.MeshPhysicalMaterial({color:new i.Color(16776960),emissive:new i.Color(0),blending:i.NormalBlending,flatShading:!0,side:i.DoubleSide,roughness:1,metalness:0}),s=new i.MeshPhysicalMaterial({color:new i.Color(5592405),emissive:new i.Color(0),blending:i.NormalBlending,flatShading:!0,side:i.DoubleSide,roughness:1,metalness:0,opacity:.2,transparent:!0});this._selectionMaterial=e,this._highlightMaterial=t,this._isolateMaterial=s}render(){this._renderer&&requestAnimationFrame(()=>this._renderer.render(this._mainScene,this._camera))}fitCameraToObjects(e,t=1.2){if(!(null==e?void 0:e.length))return;const s=new i.Box3;for(const t of e)s.expandByObject(t);const n=s.getSize(new i.Vector3),o=s.getCenter(new i.Vector3),a=Math.max(n.x,n.y,n.z)/(2*Math.atan(Math.PI*this._camera.fov/360)),r=a/this._camera.aspect,h=t*Math.max(a,r),d=this._orbitControls.target.clone().sub(this._camera.position).normalize().multiplyScalar(h);this._orbitControls.maxDistance=Math.max(10*h,1e4),this._orbitControls.target.copy(o),this._camera.near=Math.min(h/100,.01),this._camera.far=Math.max(100*h,1e4),this._camera.updateProjectionMatrix(),this._camera.position.copy(this._orbitControls.target).sub(d),this._orbitControls.update()}initPickingScene(){const e=new i.WebGLRenderTarget(1,1),t=new i.Scene;t.background=new i.Color(0),this._pickingTarget=e,this._pickingScene=t,this._renderer.domElement.addEventListener("pointerdown",this._onCanvasPointerDown),this._renderer.domElement.addEventListener("pointerup",this._onCanvasPointerUp)}nextPickingColor(){return++this._lastPickingColor}addMeshToPickingScene(e){const t=new i.MeshStandardMaterial({color:new i.Color(this.nextPickingColor()),emissive:new i.Color(this._lastPickingColor),blending:i.NoBlending,flatShading:!0,side:i.DoubleSide,roughness:1,metalness:0}),s=this._lastPickingColor.toString(16),n=new i.Mesh(e.geometry,t);n.userData.originalUuid=e.uuid,n.userData.color=s,n.position.copy(e.position),n.rotation.copy(e.rotation),n.scale.copy(e.scale),this._pickingScene.add(n),this._pickingColorToMesh.set(s,e)}removeMeshFromPickingScene(e){const t=this._pickingScene.children.find(t=>t.userData.originalUuid===e.uuid);t&&(this._pickingScene.remove(t),this._pickingColorToMesh.delete(t.userData.color))}getPickingPosition(e,t){const i=this._renderer.domElement.getBoundingClientRect();return{x:(e-i.left)*this._renderer.domElement.width/i.width,y:(t-i.top)*this._renderer.domElement.height/i.height}}getItemAtPickingPosition(e){const t=this._renderer.getPixelRatio();this._camera.setViewOffset(this._renderer.getContext().drawingBufferWidth,this._renderer.getContext().drawingBufferHeight,e.x*t||0,e.y*t||0,1,1);const s=new i.DirectionalLight(16777215,1);s.position.set(-1,2,4),this._camera.add(s),this._renderer.setRenderTarget(this._pickingTarget),this._renderer.render(this._pickingScene,this._camera),this._renderer.setRenderTarget(null),this._camera.clearViewOffset(),this._camera.remove(s);const n=new Uint8Array(4);this._renderer.readRenderTargetPixels(this._pickingTarget,0,0,1,1,n);const o=n[0]<<16|n[1]<<8|n[2];return this._pickingColorToMesh.get(o.toString(16))}updateContainerDimensions(){const e=this._container.getBoundingClientRect();this._containerWidth=e.width,this._containerHeight=e.height}updateRendererSize(){this._renderer&&(this._camera.aspect=this._containerWidth/this._containerHeight,this._camera.updateProjectionMatrix(),this._renderer.setSize(this._containerWidth,this._containerHeight,!1),this.render())}initLoader(){const e=new s;if(this._options.dracoDecoderEnabled){const t=new n;t.setDecoderPath(this._options.dracoDecoderPath),t.preload(),e.setDRACOLoader(t)}this._loader=e,this.loadQueuedModelsAsync()}loadQueuedModelsAsync(){return r(this,void 0,void 0,(function*(){if(this._loader&&!this._loadingInProgress){for(this._loadingInProgress=!0,this._modelLoadingStateChange.next(!0);this._loadingQueue.length>0;){const{url:e,guid:t,name:i}=this._loadingQueue.shift();this._loadedModelsByGuid.has(t)||(yield this.loadModel(e,t,i))}this._loadingInProgress=!1,this._modelLoadingStateChange.next(!1)}}))}loadModel(e,t,i){return r(this,void 0,void 0,(function*(){this.onModelLoadingStart(e,t);try{const s=yield this._loader.loadAsync(e,e=>this.onModelLoadingProgress(e));this.addModelToScene(s,t,i),this.onModelLoadingEnd(e,t)}catch(i){this.onModelLoadingEnd(e,t,i)}}))}onModelLoadingStart(e,t){this._modelLoadingStart.next({url:e,guid:t})}onModelLoadingProgress(e){const t=Math.round(e.loaded/e.total*100);this._modelLoadingProgress.next(t)}onModelLoadingEnd(e,t,i=null){i&&console.log(i),this._modelLoadingProgress.next(0),this._modelLoadingEnd.next({url:e,guid:t,error:i})}addModelToScene(e,t,s){if(!this._mainScene)return;const n=s||t,o=e.scene;o.userData.guid=t,o.name=n;const a=[],r=new Set;o.traverse(e=>{if(e instanceof i.Mesh){const i=`${t}|${e.name}`;e.userData.id=i,a.push(e),r.add(e.name),this._loadedMeshesById.has(i)?this._loadedMeshesById.get(i).push(e):this._loadedMeshesById.set(i,[e]),this.addMeshToPickingScene(e)}}),this._mainScene.add(o),this._loadedModelsByGuid.set(t,{gltf:e,meshes:a,handles:r,name:n}),this.emitOpenedModelsChanged(),this.fitCameraToObjects([this._mainScene]),this.render()}removeModelFromScene(e){if(!this._mainScene||!this._loadedModelsByGuid.has(e))return;const t=this._loadedModelsByGuid.get(e);t.meshes.forEach(e=>{this._loadedMeshesById.delete(e.userData.id),this.removeMeshFromPickingScene(e)}),this._mainScene.remove(t.gltf.scene),this._loadedModelsByGuid.delete(e),this.emitOpenedModelsChanged(),this.render()}emitOpenedModelsChanged(){const e=new Map;for(const[t,i]of this._loadedModelsByGuid)e.set(t,{name:i.name,handles:i.handles});this._openedModelsChange.next(e)}findMeshesByIds(e){const t=[],i=new Set;return e.forEach(e=>{this._loadedMeshesById.has(e)?t.push(...this._loadedMeshesById.get(e)):i.add(e)}),{found:t,notFound:i}}removeSelection(){for(const e of this._selectedMeshes)e.material=e[this._bakMatProp],e[this._selectedProp]=void 0;this._selectedMeshes.length=0}removeIsolation(){for(const e of this._isolatedMeshes)e.material=e[this._bakMatProp],e[this._isolatedProp]=void 0;this._isolatedMeshes.length=0}selectMeshAtPoint(e,t){const i=this.getPickingPosition(e,t),s=this.getItemAtPickingPosition(i);s?this.selectMeshes([s],!0):this.selectMeshes([],!0)}addToSelection(e){if(!e||this._selectedMeshes.includes(e))return!1;const t=[e,...this._selectedMeshes];return this.selectMeshes(t,!0),!0}removeFromSelection(e){if(!e||!this._selectedMeshes.includes(e))return!1;const t=this._selectedMeshes.filter(t=>t!==e);return this.selectMeshes(t,!0),!0}selectMeshes(e,t,i=!1){if(this.removeSelection(),this.removeIsolation(),!(null==e?void 0:e.length))return this.emitSelectionChanged(t),null;e.forEach(e=>{e[this._bakMatProp]||(e[this._bakMatProp]=e.material),e[this._selectedProp]=!0,e.material=this._selectionMaterial}),i&&this.isolateSelectedMeshes(),this._selectedMeshes=e,this.emitSelectionChanged(t)}isolateSelectedMeshes(){[...this._loadedMeshesById.values()].flatMap(e=>e).forEach(e=>{e[this._selectedProp]||(e[this._bakMatProp]||(e[this._bakMatProp]=e.material),e[this._isolatedProp]=!0,e.material=this._isolateMaterial,this._isolatedMeshes.push(e))})}emitSelectionChanged(e){e||this.fitCameraToObjects(this._selectedMeshes),this.render();const t=new Set;this._selectedMeshes.forEach(e=>t.add(e.userData.id)),this._selectionChange.next(t),e&&this._manualSelectionChange.next(t)}}export{d as GltfViewer,h as GltfViewerOptions};
